from concurrent.futures import ThreadPoolExecutor
import yt_dlp
import os
import time

# Danh s√°ch URL video c·∫ßn t·∫£i
video_urls = [
    'https://www.youtube.com/watch?v=XqZsoesa55w',
    'https://www.youtube.com/watch?v=e_04ZrNroTo',
    'https://www.youtube.com/watch?v=YVVTZgwYwVo'
]

# T·∫°o th∆∞ m·ª•c l∆∞u video n·∫øu ch∆∞a t·ªìn t·∫°i
if not os.path.exists('downloaded_videos'):
    os.makedirs('downloaded_videos')

start = time.time()

# H√†m t·∫£i video
def download_video(url):
    ydl_opts = {
        'outtmpl': 'downloaded_videos/%(title)s.%(ext)s',  # T√™n file duy nh·∫•t d·ª±a tr√™n ti√™u ƒë·ªÅ
        'format': 'worst',  # T·∫£i video v·ªõi ch·∫•t l∆∞·ª£ng th·∫•p nh·∫•t
        'merge_output_format': 'mp4'  # T·ª± ƒë·ªông chuy·ªÉn th√†nh MP4
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        try:
            print(f"üîÑ ƒêang t·∫£i: {url}")
            ydl.download([url])
            print(f"‚úÖ T·∫£i xong: {url}\n")
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫£i {url}: {e}")

# S·ª≠ d·ª•ng ThreadPoolExecutor ƒë·ªÉ t·∫£i video song song
with ThreadPoolExecutor(max_workers=3) as executor:  # S·ªë lu·ªìng t·ªëi ƒëa
    executor.map(download_video, video_urls)
    
print("Elapsed time:", time.time() - start, "seconds")
